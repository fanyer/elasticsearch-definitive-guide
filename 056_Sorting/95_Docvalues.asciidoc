[[文档值引言]]
=== 文档值引言

本章的目的在于介绍关于ElasticSearch内部的一些运行情况。在这里我们先不介绍新的知识点，
文档值是我们要经常重复的内容之一，并且是我们应当明确的。((("docvalues")))

当你对一个字段进行排序时，ElasticSearch 需要进入每个匹配到的文档得到相关的值。
倒排索引在用于搜索时是非常卓越的，但却不是理想的排序结构。

* 当搜索的时候，我们需要用检索词去遍历所有的文档。

* 当排序的时候，我们需要用文档去匹配检索词。即，我们需要``倒置`` 已经反向的索引。

 ``倒置`` 结构 在系统中经常被称作 ``列存储``。
Essentially, it stores all the values for a single field together in a single
column of data, which makes it very efficient for operations like sorting.

In Elasticsearch, this column-store is known as _doc values_, and is enabled
by default. Doc values are created at index-time: when a field is indexed, Elasticsearch
adds the tokens to the inverted index for search.  But it also extracts the terms
and adds them to the columnar doc values.

ElasticSearch中的文档值常被应用到以下场景：

* 对一个字段进行排序
* 对一个字段进行聚合
* 某些过滤，比如地理位置过滤
* 某些与字段相关的脚本计算

Because doc values are serialized to disk, we can leverage the OS to help keep
access fast.  When the "working set" is smaller than the available memory on a node,
the OS will naturally keep all the doc values hot in memory, leading to very fast
access.  When the "working set" is much larger than available memory, the OS will
naturally start to page doc-values on/off disk without running into the dreaded
OutOfMemory exception.

We'll talk about doc values in much greater depth later.  For now, all you need
to know is that sorting (and some other operations) happen on a parallel data
structure which is built at index-time.
