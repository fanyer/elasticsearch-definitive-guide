[[文档值引言]]
=== 文档值引言

本章的目的在于介绍关于ElasticSearch内部的一些运行情况。在这里我们先不介绍新的知识点，
文档值是我们要经常重复的内容之一，并且是我们应当明确的。((("docvalues")))

当你对一个字段进行排序时，ElasticSearch 需要进入每个匹配到的文档得到相关的值。
倒排索引在用于搜索时是非常卓越的，但却不是理想的排序结构。

* 当搜索的时候，我们需要用检索词去遍历所有的文档。

* 当排序的时候，我们需要用文档去匹配检索词。即，我们需要``倒置`` 已经反向的索引。

``倒置`` 结构 在系统中经常被称作 ``列存储``。重要的是，它将所有单字段的值存储在单数据列中，这使得对其进行操作是十分高效的，例如排序。

在 Elasticsearch ，列存储被默认支持，且被理解为 _文档值_ 。文档值在索引时被创建：当一个字段被索引时，Elasticsearch为每个搜索的反向文档增加tokens ，但是它仍然提取检索词，并且将其加入列文档值。



ElasticSearch中的文档值常被应用到以下场景：

* 对一个字段进行排序
* 对一个字段进行聚合
* 某些过滤，比如地理位置过滤
* 某些与字段相关的脚本计算

因为文档值在磁盘被序列化，我们可以利用杠杆效应使得系统帮助其保持高速的可读写。当 "working set" 远小于节点的可用内存，系统会自动将文档值保持在内存中，使得其读写十分高速；当其远大于可用内存，系统会自动将文档值在磁盘上进行分页，而不会导致内存溢出。



我们稍后会深入讨论文档值。现在所有你需要知道的是排序发生在索引时建立的平行数据结构中。

